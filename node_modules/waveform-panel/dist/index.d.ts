// Generated by dts-bundle-generator v7.1.0

import WaveformData from 'waveform-data';
import { StoreApi } from 'zustand';

export interface WaveformStoreProps {
	duration: number;
	quality: number;
	currentTime: number;
	hoverTime: number;
	bufferedSlices: any[];
	isLoading: boolean;
	loadingProgress: number;
	dimensions: {
		pageX: number;
		pageY: number;
		height: number;
		width: number;
		dpi: number;
	};
	mouse: {
		isHover: boolean;
		isActive: boolean;
	};
	pointer: {
		isDown: boolean;
	};
	sources: Array<{
		waveform: string;
		id: string;
		data: WaveformData | null;
		duration?: number;
		segment?: {
			id: string;
			start: number;
			end: number;
		};
	}>;
	sequence: WaveformSequence[];
}
export type WaveformSequence = {
	id: string;
	source: string;
	startTime: number;
	endTime: number;
	waveform: null | {
		data: WaveformData;
		atWidth: number;
		startPixel: number;
		quality: number;
		segment?: {
			id: string;
			start: number;
			end: number;
		};
	};
};
export interface WaveformStoreState extends WaveformStoreProps {
	setDimensions(box: DOMRect, dpi?: number): void;
	setHover(x: number): void;
	setAttributes(props: WaveformPanelAttributes, skipResize: boolean, signal: () => boolean): Promise<void>;
	resize(signal: () => boolean): Promise<void>;
}
export type WaveformStore = StoreApi<WaveformStoreState>;
export interface WaveformPanelProps {
	src?: {
		waveform: string;
		id: string;
	};
	srcset: Array<{
		waveform: string;
		id: string;
	}>;
	sequence: Array<{
		id: string;
		startTime: number;
		endTime: number;
	}>;
	duration: number;
	quality: number;
	resize: "true" | "false";
	"current-time": number;
}
export type WaveformPanelAttributes = Partial<Record<keyof WaveformPanelProps, string>>;
export declare class WaveformPanel extends HTMLElement {
	store: WaveformStore;
	hasInitialised: boolean;
	initialAttributes: WaveformPanelAttributes;
	unsubscribe: () => void;
	invalidation: {
		dimensions: boolean;
		sequence: boolean;
	};
	svg: SVGElement;
	svgParts: {
		loading: SVGRectElement;
		mask: SVGMaskElement;
		waveforms: SVGGElement;
		maskBg: SVGRectElement;
		base: SVGRectElement;
		progress: SVGRectElement;
		hover: SVGRectElement;
		buffered: SVGGElement;
		line: SVGGElement;
	};
	buffered?: Record<string, TimeRanges>;
	waveformCache: Record<string, WaveformData>;
	constructor();
	set currentTime(currentTime: number);
	get currentTime(): number;
	get duration(): number;
	get quality(): number;
	lastBufferedStarts: any[];
	reseek(buffered?: Record<string, TimeRanges>): void;
	createEmptySVG(): void;
	resizeSVG(): void;
	addSequenceToSVG(sequence: WaveformSequence): void;
	removeSequenceFromSVG(id: string): void;
	render(): void;
	static get observedAttributes(): Array<keyof WaveformPanelAttributes>;
	lastWidth: number;
	lastHeight: number;
	resizeTimout: number;
	requeueResize: boolean;
	resize: () => void;
	isAlreadyResizing: boolean;
	forceResize: () => void;
	setIsLoading(isLoading: any): void;
	connectedCallback(): void;
	moveToPoint(target: {
		x: number;
		y: number;
	}, isClick?: boolean): void;
	attributeQueue: WaveformPanelAttributes;
	attributeTimeout: number;
	isAlreadyUpdating: boolean;
	requeueUpdate: boolean;
	windowEvent: boolean;
	attributeChangedCallback(name: any, oldValue: any, newValue: any): void;
	queueUpdate(): void;
	updateAttributes(): void;
	disconnectedCallback(): void;
}

export {};
